#ifndef TEMPLATE_HPP
#define TEMPLATE_HPP

/***************************************************************************************************
*                                         I N C L U D E S                                          *
***************************************************************************************************/
#include "nocopy.hpp"
#include "stdint.h"

/***************************************************************************************************
*                                          D E F I N E S                                           *
***************************************************************************************************/
namespace Template
{

static constexpr uint8_t COUNTER_INIT   { 50U };
static constexpr uint8_t COUNTER_MAX    { 100U };

/***************************************************************************************************
*                                         T Y P E D E F S                                          *
***************************************************************************************************/

/***************************************************************************************************
*                     P U B L I C   F U N C T I O N   D E C L A R A T I O N S                      *
***************************************************************************************************/

/***************************************************************************************************
*                          P U B L I C   I N L I N E   F U N C T I O N S                           *
***************************************************************************************************/

/***************************************************************************************************
*                              C L A S S   D E C L A R A T I O N S                                 *
***************************************************************************************************/
class TemplateClass final
{
    public:
        constexpr TemplateClass()
        {}

        NOCOPY_NOMOVE(TemplateClass);

        void Init(void);
        void Run(void);

    private:
        uint8_t m_counter {0U};

        void IncrementCounter(uint8_t& counter) const;
};

} // namespace Template

#endif // TEMPLATE_HPP
